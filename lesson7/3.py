# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. 
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число). 
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), 
#     вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).

#     Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и 
#     обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться 
#     округление значения до целого числа.

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух 
# клеток.

# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух 
# клеток больше нуля, иначе выводить соответствующее сообщение.

# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества 
# ячеек этих двух клеток.

# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление 
# количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. 
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному 
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. 
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек 

class Cell:
    def __init__(self, cell):
        self.cell = cell
    def __add__(self, other):

        return self.cell + other.cell
    
    def __sub__(self, other):
        n = max(self.cell, other.cell) - min(self.cell, other.cell)
        self.res = n
        return n if n > 0 else 'одинаковы'
    
    def __mul__(self, other):

        return self.cell * other.cell 
    
    def __truediv__(self, other):

        return int(round((self.cell / other.cell),0))         
                   
c = Cell(4)
c1 = Cell(5)

def calc(n):
    for i in range(1, n + 1):
        print('*' + r'\n' if not i%n1 else '*', end = ' ')

print(calc(c - c1))
print(calc(c + c1))
print(calc(c * c1))
print(calc(c / c1))
